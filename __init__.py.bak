from Tkinter import *
import random 
import tkMessageBox
import time
import os
import time
import tkMessageBox



print os.name

try:
        os.listdir("/usr/")
except OSError:  
        os_flag = "windows"
    
try:
        os.listdir("c:")
except OSError: 
        os_flag = "linux"


if os_flag == "windows":
        global path
        path = "w:frostybaby/src/frosty_pack/"
        print "we are on windows"
elif os_flag == "linux":
        global path
        path = "/home/winuser/frostybaby/" 
        print "we are on linux"
        

class App:
    def __init__(self,):

#create the windows...

#master1 is just fake, we withdraw it immediately. Close that root window to terminate the app
        global master1
        master1 = Tk()
        master1.wm_title("root window")
        master1.withdraw()
        
        global master
        master = Toplevel()
        master.wm_title("main window")
        self.centerwindow(master)

        global bach
        bach = Toplevel()
        bach.wm_title("Bachman window")
        self.centerwindow(bach)
        
        global sig
        sig = Toplevel()
        sig.wm_title("Signatures window")
        self.centerwindow(sig)
        
        global chords
        chords = Toplevel()
        chords.wm_title("Chords window")
        self.centerwindow(chords)
        
#main window

        w = Canvas(master, width=600, height=400)
        w2 = Canvas(master, width=100, height=100)
        w.pack()
        w2.pack()

#Bach window
                
        bc1 = Canvas(bach, width=800, height=400)
        bc2 = Canvas(bach, width=100, height=100)
        bc1.pack()
        bc2.pack()

#Signature window
        
        s1 = Canvas(sig, width=600, height=400)
        s2 = Canvas(sig, width=100, height=100)
        s1.pack()
        s2.pack()

#Chords window
        global chr1
        chr1 = Canvas(chords, width=600, height=400)
        global chr2
        chr2 = Canvas(chords, width=100, height=100)
        chr1.pack()
        chr2.pack()


#Just show main window

        sig.withdraw()
        bach.withdraw()
        chords.withdraw()

# here come the buttons and bindings!                       
        self.bachman_button = Button(w2, text="Do the Bach-man!", 
        command = lambda
        arg1=bc1 :
        self.bachman(arg1)
        )
        self.bachman_button.pack(side=TOP)
        
        
        self.chords_button = Button(w2, text="Train Chords", command=self.chords)
        self.chords_button.pack(side=TOP)

        self.sigs_button = Button(w2, text="Train Signatures", 
        command = lambda 
        arg1=s1 :
        self.signatures(arg1)
        )
        self.sigs_button.pack(side=TOP)

        var_toggle = IntVar()
        self.logging = Checkbutton(w2, text="logging enabled", var=var_toggle)
        self.logging.pack(side=TOP)
        
        self.quit_all_main = Button(w2, text="QUIT", fg="red", command=master1.destroy)
        self.quit_all_main.pack(side=TOP)
        
        self.quit_all_bach = Button(bc2, text="QUIT", fg="red", command=master1.destroy)
        self.quit_all_bach.pack(side=TOP)
        
        self.quit_all_sig = Button(s2, text="QUIT", fg="red", command=master1.destroy)
        self.quit_all_sig.pack(side=TOP)

        self.quit_all_chords = Button(chr2, text="QUIT", fg="red", command=master1.destroy)
        self.quit_all_chords.pack(side=TOP)
#        self.go_back = Button(s2, text="back to main", command=self.bachman())
#        self.go_back.pack(side=TOP)
        
        self.got_it_sig_button = Button(s2, text="Got it!", 
        command = lambda 
        arg2=s1 :
        self.got_it_sig(arg2)
        )  
        self.got_it_sig_button.pack(side=TOP)
        
        self.got_it_chr_button = Button(chr2, text="Got it!", 
        command = lambda 
        arg2=chr1 :
        self.got_it_chr(arg2)
        )  
        self.got_it_chr_button.pack(side=TOP)
        
        self.got_it_bach_button = Button(bc2, text="Got it!", 
        command = lambda 
        arg2=bc1 :
        self.got_it_bach(arg2)
        )  
        self.got_it_bach_button.pack(side=TOP)        
        
        
    def centerwindow(self, window):    
        window.update()
        sw = window.winfo_screenwidth()
        sh = window.winfo_screenheight()
        w = window.winfo_width()
        h = window.winfo_height()
        newGeometry='+%d+%d' % ((sw/2)-(w/2), (sh/2)-(h/2))
        window.geometry(newGeometry=newGeometry)
        window.update()
 

    def bachman(self, res):
        
        master.withdraw()
        bach.deiconify()
        
        tkMessageBox.showinfo(message='Get ready!!')          
              
        res.img1 = PhotoImage(file=path+"images/Bach001.gif")
        res.img2 = PhotoImage(file=path+"images/Bach002.gif")
        res.img3 = PhotoImage(file=path+"images/Bach003.gif")
        res.img4 = PhotoImage(file=path+"images/Bach004.gif")
        res.img5 = PhotoImage(file=path+"images/Bach005.gif")
        res.img6 = PhotoImage(file=path+"images/Bach006.gif")
        res.img7 = PhotoImage(file=path+"images/Bach007.gif")
        res.img8 = PhotoImage(file=path+"images/Bach008.gif")
        res.img9 = PhotoImage(file=path+"images/Bach009.gif")
        res.img10 = PhotoImage(file=path+"images/Bach010.gif")
        res.img11 = PhotoImage(file=path+"images/Bach011.gif")
        res.img12 = PhotoImage(file=path+"images/Bach012.gif")
        res.img13 = PhotoImage(file=path+"images/Bach013.gif")
        res.img14 = PhotoImage(file=path+"images/Bach014.gif")
        res.img15 = PhotoImage(file=path+"images/Bach015.gif")
        res.img16 = PhotoImage(file=path+"images/Bach016.gif")
        res.img17 = PhotoImage(file=path+"images/Bach017.gif")
        res.img18 = PhotoImage(file=path+"images/Bach018.gif")
        
        
        bach_dict = {"1": res.img1, "2": res.img2, "3": res.img3, "4": res.img4, "5": res.img5, "6": res.img6, "7": res.img7, "8": res.img8, "9": res.img9, "10": res.img10, "11": res.img11, "12": res.img12, "13": res.img13, "14": res.img14, "15": res.img15, "16": res.img16, "17": res.img17, "18": res.img18}
        choice = random.choice(bach_dict.keys())

        res.create_image(700, 0, image=bach_dict[choice], anchor="ne")
     
# note the time
        global time_before
        time_before = time.time()
       
        global label
        label = choice
        
        
    def chords(self):    
        
        master.withdraw()
        chords.deiconify()
        
#       rand_nr = random.randint(0,33)
         
        rand_nr = 1
        keys = ["C", "D", "E", "F", "G", "A", "B", "Cm", "Dm", "Em", "Fm", "Gm", "Am", "Bm", "C#", "D#", "F#", "G#", "A#", "C#m", "D#m", "F#m", "G#m", "A#m", "Db", "Eb", "Gb", "Ab", "Bb", "Dbm", "Ebm", "Gbm", "Abm", "Bbm"]
        
        choice = random.choice(keys)
        self.q_key(choice)     
        global time_before
        time_before = time.time()
        global label
        label = choice
          
    def q_key(self, key):   
        chr1.delete("all")
        text_id = chr1.create_text(300, 200, text="Chord " +key)

    def log_it(self, file, log_line):    
        #open file
        f=open(path+file, 'a')
        f.write(log_line)
        f.close()
        
        
    def signatures(self, res):    
        master.withdraw()
        bach.withdraw()
        sig.deiconify()
        tkMessageBox.showinfo(message='Get ready!!')
        
        res.img0 = PhotoImage(file=path+"images/0.gif")
        res.img1 = PhotoImage(file=path+"images/1.gif")
        res.img2 = PhotoImage(file=path+"images/2.gif")
        res.img3 = PhotoImage(file=path+"images/3.gif")
        res.img4 = PhotoImage(file=path+"images/4.gif")
        res.img5 = PhotoImage(file=path+"images/5.gif")
        res.img6 = PhotoImage(file=path+"images/6.gif")
        res.img7 = PhotoImage(file=path+"images/7.gif")
        res.img8 = PhotoImage(file=path+"images/-7.gif")
        res.img9 = PhotoImage(file=path+"images/-6.gif")
        res.img10 = PhotoImage(file=path+"images/-5.gif")
        res.img11 = PhotoImage(file=path+"images/-4.gif")
        res.img12 = PhotoImage(file=path+"images/-3.gif")
        res.img13 = PhotoImage(file=path+"images/-2.gif")
        res.img14 = PhotoImage(file=path+"images/-1.gif")
 
        sig_dict = {"C": res.img0, "G": res.img1, "D": res.img2, "A": res.img3, "E": res.img4, "H": res.img5, "Fis": res.img6, "Cis": res.img7, "Ces": res.img8, "Ges": res.img9, "Des": res.img10, "As": res.img11, "Es": res.img12, "B": res.img13, "F": res.img14}
        choice = random.choice(sig_dict.keys())

        res.create_image(150, 0, image=sig_dict[choice], anchor="ne")
     
# note the time
        global time_before
        time_before = time.time()
       
        global label
        label = choice
       


#press space when you got it

    def got_it_sig(self, res2):
#Now the guy pushed the got it, time him
        global time_after
        time_after = time.time()
        latency = str(round(time_after - time_before, 3))
        messy = "It took you " + latency + " seconds!"
        tkMessageBox.showinfo(message=messy)
# log into file
        log_string = label + ", " + latency + ", " + str(time.strftime( '%Y%m%d')) + "\n"
        self.log_it("sig_log.csv", log_string)
        self.signatures(res2)   
             
    def got_it_chr(self, res2):
#Now the guy pushed the got it, time him
        global time_after
        time_after = time.time()
        latency = str(round(time_after - time_before, 3))
        messy = "It took you " + latency + " seconds!"
        tkMessageBox.showinfo(message=messy)
        log_string = label + ", " + latency + ", " + str(time.strftime( '%Y%m%d')) + "\n"
        self.log_it("chords_log.csv", log_string)
        self.chords()              
        
    def got_it_bach(self, res3):
#Now the guy pushed the got it, time him
        global time_after
        time_after = time.time()
        latency = str(round(time_after - time_before, 3))
        messy = "It took you " + latency + " seconds!"
        tkMessageBox.showinfo(message=messy)
        log_string = label + ", " + latency + ", " + str(time.strftime( '%Y%m%d')) + "\n"
        self.log_it("bach_log.csv", log_string)
        self.bachman(res3)               
        
        
        
app = App()
  
mainloop()
